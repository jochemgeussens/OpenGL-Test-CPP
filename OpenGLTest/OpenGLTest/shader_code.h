#ifndef SHADER_CODE_H
#define SHADER_CODE_H

extern const char* NORMAL_MATERIAL_PARTICLE_FRAG;// = "#version 330 \r\nin vec3 EyespaceNormal; \r\nin vec3 Ambient; \r\nin vec3 Diffuse; \r\nin vec3 Specular; \r\nin float Shininess; \r\n \r\nuniform vec3 LightPosition; \r\nout vec4 FragColor; \r\nvoid main() \r\n{ \r\n	vec3 N = normalize(EyespaceNormal); \r\n	vec3 L = normalize(LightPosition); \r\n	vec3 E = vec3(0, 0, 1); \r\n	vec3 H = normalize(L + E); \r\n	float df = max(0.0, dot(N, L)); \r\n	float sf = max(0.0, dot(N, H)); \r\n	sf = pow(sf, Shininess); \r\n	vec3 color = Ambient + df * Diffuse + sf * Specular; \r\n	FragColor = vec4(color, 0); \r\n}";

extern const char* NORMAL_MATERIAL_PARTICLE_VERT;// = "#version 330 core \r\nin vec4 Position;\r\nin vec3 Normal;\r\nin vec4 TCol1; // Transformation column1\r\nin vec4 TCol2; // Transformation column2\r\nin vec4 TCol3; // Transformation column3\r\nin vec4 TCol4; // Transformation column4\r\nin vec3 AmbientMaterial;\r\nin vec3 DiffuseMaterial;\r\nin vec3 SpecularMaterial;\r\nin float ShininessValue;\r\n\r\nuniform mat4 Projection;\r\nuniform mat4 Modelview;\r\nuniform mat3 NormalMatrix;\r\n\r\nout vec3 EyespaceNormal;\r\nout vec3 Ambient;\r\nout vec3 Diffuse;\r\nout vec3 Specular;\r\nout float Shininess;\r\n\r\nvoid main()\r\n{\r\n	mat4 transformation = mat4(0);\r\n	transformation[0] = TCol1;\r\n	transformation[1] = TCol2;\r\n	transformation[2] = TCol3;\r\n	transformation[3] = TCol4;\r\n\r\n    vec4 pos = Position * transformation;\r\n	vec4 norm4 = vec4(Normal.x, Normal.y, Normal.z, 0) * transformation;\r\n\r\n\r\n	vec3 norm3 = norm4.xyz;\r\n    EyespaceNormal = NormalMatrix * norm3;\r\n	gl_Position = Projection * Modelview * pos;\r\n	\r\n    Ambient = AmbientMaterial;\r\n    Diffuse = DiffuseMaterial;\r\n	Specular = SpecularMaterial;\r\n	Shininess = ShininessValue;\r\n}\r\n";

#endif

